from kivy.uix.screenmanager import Screen
from kivy.properties import StringProperty, ListProperty, NumericProperty
from kivymd.uix.dialog import MDDialog
from kivymd.uix.label import MDLabel
from kivymd.uix.card import MDCard
from kivymd.uix.list import OneLineListItem, OneLineAvatarListItem, IconLeftWidget
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDFlatButton
from datetime import datetime, timedelta
from database import get_connection
from kivy.metrics import dp



class CalendarDayButton(MDFlatButton):
    """–ö–Ω–æ–ø–∫–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""

    def __init__(self, day, has_events=False, **kwargs):
        super().__init__(**kwargs)
        self.day = day
        self.has_events = has_events
        self.text = str(day)
        self.size_hint = (1, 1)
        self.font_size = '14sp'

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–Ω–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        if has_events:
            self.md_bg_color = (0.2, 0.6, 0.8, 0.3)


class HomeScreen(Screen):
    title = StringProperty("–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
    today_tasks = ListProperty([])
    upcoming_deadlines = ListProperty([])
    next_exam = ListProperty([])

    # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    current_month = NumericProperty(datetime.now().month)
    current_year = NumericProperty(datetime.now().year)
    calendar_days = ListProperty([])

    def on_pre_enter(self):
        self.init_calendar()
        self.load_all_sections()
        self.debug_check_all_tasks()

    def get_event_type_text(self, event_type):
        """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        type_map = {
            'exam': '–≠–∫–∑–∞–º–µ–Ω',
            'homework': '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞',
            'lecture': '–õ–µ–∫—Ü–∏—è',
            'practice': '–ü—Ä–∞–∫—Ç–∏–∫–∞',
            'other': '–ó–∞–¥–∞—á–∞'
        }
        return type_map.get(event_type, '–°–æ–±—ã—Ç–∏–µ')

    def get_events_for_date(self, date):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        try:
            print(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∞—Ç—ã: {date}")

            with get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT t.*, s.name as subject_name 
                        FROM tasks t 
                        LEFT JOIN subjects s ON t.subject_id = s.id 
                        WHERE t.due_date::date = %s 
                        AND t.status != 'completed'
                        ORDER BY 
                            CASE 
                                WHEN t.type = 'exam' THEN 1
                                ELSE 2 
                            END,
                            t.due_date ASC
                    """, (date,))
                    events = cur.fetchall()

                    print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
                    for event in events:
                        print(f"   - {event['title']} ({event.get('type', 'no type')})")

                    return [dict(event) for event in events]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return []

    def on_day_selected(self, day_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        if day_info['month'] == 'current':
            selected_date = day_info['date']
            print(f"üéØ –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {selected_date}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            events = self.get_events_for_date(selected_date)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
            self.show_day_events_dialog(selected_date, events)

    # –í–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ MDDivider, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å HomeScreen:
    def create_divider(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        from kivy.uix.widget import Widget
        divider = Widget(
            size_hint_y=None,
            height=dp(1),
            canvas_color=(0.9, 0.9, 0.9, 1)
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –Ω–∞ canvas
        from kivy.graphics import Color, Line
        with divider.canvas:
            Color(0.9, 0.9, 0.9, 1)
            Line(points=[dp(10), 0, divider.width - dp(10), 0], width=dp(1))

        return divider

    def show_day_events_dialog(self, date, events):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –¥–Ω—è"""
        print(f"üîÑ –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è {date}, —Å–æ–±—ã—Ç–∏–π: {len(events)}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if hasattr(self, 'day_events_dialog') and self.day_events_dialog:
            self.day_events_dialog.dismiss()

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        content = MDBoxLayout(
            orientation="vertical",
            spacing=dp(15),
            adaptive_height=True,
            size_hint_y=None,
            padding=dp(10)
        )

        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        header_layout = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=None,
            height=dp(50),
            spacing=dp(15)
        )

        # –ò–∫–æ–Ω–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        from kivymd.uix.label import MDIcon
        header_layout.add_widget(MDIcon(
            icon="calendar",
            size_hint_x=None,
            width=dp(40),
            theme_text_color="Custom",
            text_color=(0.5, 0.3, 0.7, 1)
        ))

        # –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_text = MDBoxLayout(
            orientation="vertical",
            spacing=dp(2)
        )
        header_text.add_widget(MDLabel(
            text="–°–æ–±—ã—Ç–∏—è –¥–Ω—è",
            font_style="H5",
            bold=True,
            theme_text_color="Custom",
            text_color=(0.4, 0.2, 0.6, 1),
            size_hint_y=None,
            height=dp(25)
        ))
        header_text.add_widget(MDLabel(
            text=date.strftime('%d.%m.%Y'),
            font_style="Subtitle1",
            theme_text_color="Custom",
            text_color=(0.6, 0.6, 0.7, 1),
            size_hint_y=None,
            height=dp(20)
        ))

        header_layout.add_widget(header_text)
        header_layout.add_widget(MDLabel(size_hint_x=0.2))
        content.add_widget(header_layout)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        content.add_widget(self.create_simple_divider())

        if not events:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
            empty_message = MDBoxLayout(
                orientation="vertical",
                size_hint_y=None,
                height=dp(80),
                spacing=dp(10)
            )

            empty_message.add_widget(MDIcon(
                icon="calendar-remove",
                size_hint_y=None,
                height=dp(40),
                theme_text_color="Custom",
                text_color=(0.7, 0.7, 0.8, 1)
            ))

            empty_message.add_widget(MDLabel(
                text="–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç",
                font_style="Subtitle1",
                theme_text_color="Custom",
                text_color=(0.6, 0.6, 0.7, 1),
                halign="center",
                size_hint_y=None,
                height=dp(25)
            ))

            content.add_widget(empty_message)
            content.height = dp(150)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        else:
            # –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏
            for event in events:
                event_item = self.create_event_list_item(event)
                content.add_widget(event_item)

            content.height = dp(80 + len(events) * 70)  # –í—ã—Å–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥
        self.day_events_dialog = MDDialog(
            type="custom",
            content_cls=content,
            size_hint=(0.85, None),
            height=content.height + dp(100),  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            md_bg_color=(0.98, 0.98, 1, 1),
            radius=[25, 25, 25, 25],
            elevation=8,
            buttons=[
                MDFlatButton(
                    text="[color=5A2D8C]–ó–ê–ö–†–´–¢–¨[/color]",
                    theme_text_color="Custom",
                    on_release=lambda x: self.day_events_dialog.dismiss()
                ),
            ],
        )

        print("‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º...")
        self.day_events_dialog.open()

    def create_simple_divider(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        from kivy.uix.widget import Widget
        divider = Widget(
            size_hint_y=None,
            height=dp(1)
        )

        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é
        from kivy.graphics import Color, Rectangle
        with divider.canvas:
            Color(0.9, 0.9, 0.9, 1)
            Rectangle(pos=(dp(10), 0), size=(divider.width - dp(20), dp(1)))

        return divider

    def create_event_list_item(self, event):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        from kivymd.uix.boxlayout import MDBoxLayout
        from kivymd.uix.label import MDLabel, MDIcon

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        item = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=None,
            height=dp(60),
            spacing=dp(15),
            padding=dp(10),
            md_bg_color=(0.95, 0.95, 0.98, 1),
            radius=[10, 10, 10, 10]
        )

        # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        icon_name = self.get_event_icon(event.get('type', 'other'))
        item.add_widget(MDIcon(
            icon=icon_name,
            size_hint_x=None,
            width=dp(30),
            theme_text_color="Custom",
            text_color=self.get_event_color(event.get('type', 'other'))
        ))

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text_layout = MDBoxLayout(
            orientation="vertical",
            spacing=dp(2)
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        text_layout.add_widget(MDLabel(
            text=event['title'],
            font_style="Subtitle1",
            bold=True,
            theme_text_color="Custom",
            text_color=(0.2, 0.2, 0.3, 1),
            size_hint_y=None,
            height=dp(25),
            shorten=True,
            shorten_from='right'
        ))

        # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ None
        subject_name = event.get('subject_name', '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞')
        if subject_name is None:
            subject_name = '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞'

        secondary_text = f"{subject_name} | {self.get_event_type_text(event.get('type'))}"
        text_layout.add_widget(MDLabel(
            text=secondary_text,
            font_style="Caption",
            theme_text_color="Custom",
            text_color=(0.5, 0.5, 0.6, 1),
            size_hint_y=None,
            height=dp(20)
        ))

        item.add_widget(text_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
        item.bind(on_touch_down=lambda instance, touch: self.on_event_item_pressed(instance, touch, event))

        return item

    def get_event_icon(self, event_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        icons = {
            'exam': 'school',
            'homework': 'book-open-page-variant',
            'lecture': 'presentation',
            'practice': 'code-tags',
            'other': 'calendar-check'
        }
        return icons.get(event_type, 'calendar-check')

    def get_event_color(self, event_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        colors = {
            'exam': (0.8, 0.2, 0.2, 1),
            'homework': (0.2, 0.6, 0.8, 1),
            'lecture': (0.3, 0.7, 0.3, 1),
            'practice': (0.9, 0.6, 0.1, 1),
            'other': (0.5, 0.3, 0.7, 1)
        }
        return colors.get(event_type, (0.5, 0.3, 0.7, 1))

    def on_event_item_pressed(self, instance, touch, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è"""
        if instance.collide_point(*touch.pos):
            self.view_task_details(event)
            return True
        return False

    def init_calendar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ç–µ–∫—É—â–∏–º –º–µ—Å—è—Ü–µ–º"""
        now = datetime.now()
        self.current_month = now.month
        self.current_year = now.year
        self.update_calendar()

    def update_calendar(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        month_tasks = self.get_tasks_for_month(self.current_year, self.current_month)

        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        self.generate_calendar_days(self.current_year, self.current_month, month_tasks)

        # –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        self.update_calendar_ui()

    def get_tasks_for_month(self, year, month):
        """–ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
        try:
            start_date = datetime(year, month, 1).date()
            if month == 12:
                end_date = datetime(year + 1, 1, 1).date()
            else:
                end_date = datetime(year, month + 1, 1).date()

            with get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT due_date::date as task_date, COUNT(*) as task_count
                        FROM tasks 
                        WHERE due_date::date BETWEEN %s AND %s 
                        AND status != 'completed'
                        GROUP BY due_date::date
                    """, (start_date, end_date))
                    tasks = cur.fetchall()
                    return {task['task_date']: task['task_count'] for task in tasks}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return {}

    def generate_calendar_days(self, year, month, month_tasks):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        first_day = datetime(year, month, 1)
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if month == 12:
            last_day = datetime(year + 1, 1, 1) - timedelta(days=1)
        else:
            last_day = datetime(year, month + 1, 1) - timedelta(days=1)

        # –î–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        days_before = first_day.weekday()
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1

        if prev_month == 12:
            prev_last_day = datetime(prev_year, prev_month, 31)
        else:
            prev_last_day = datetime(prev_year, prev_month + 1, 1) - timedelta(days=1)

        calendar_days = []

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for day in range(prev_last_day.day - days_before + 1, prev_last_day.day + 1):
            calendar_days.append({
                'day': day,
                'month': 'prev',
                'has_events': False
            })

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        today = datetime.now().date()
        for day in range(1, last_day.day + 1):
            current_date = datetime(year, month, day).date()
            has_events = current_date in month_tasks
            is_today = current_date == today

            calendar_days.append({
                'day': day,
                'month': 'current',
                'has_events': has_events,
                'is_today': is_today,
                'date': current_date
            })

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        days_after = 42 - len(calendar_days)  # 6 –Ω–µ–¥–µ–ª—å –ø–æ 7 –¥–Ω–µ–π
        for day in range(1, days_after + 1):
            calendar_days.append({
                'day': day,
                'month': 'next',
                'has_events': False
            })

        self.calendar_days = calendar_days

    def update_calendar_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if not hasattr(self, 'ids') or 'calendar_grid' not in self.ids:
            return

        container = self.ids.calendar_grid
        container.clear_widgets()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        week_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        for day in week_days:
            container.add_widget(MDLabel(
                text=day,
                halign='center',
                font_style='Caption',
                size_hint_y=None,
                height=30
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        for day_info in self.calendar_days:
            if day_info['month'] == 'current':
                btn = CalendarDayButton(
                    day=day_info['day'],
                    has_events=day_info['has_events'],
                    on_release=lambda x, d=day_info: self.on_day_selected(d)
                )
                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
                if day_info.get('is_today', False):
                    btn.md_bg_color = (0.2, 0.8, 0.2, 0.3)
            else:
                btn = MDLabel(
                    text=str(day_info['day']),
                    halign='center',
                    theme_text_color='Secondary',
                    size_hint_y=None,
                    height=40
                )
            container.add_widget(btn)

    def show_day_tasks(self, date):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
        print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date}")

    def prev_month(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É"""
        if self.current_month == 1:
            self.current_month = 12
            self.current_year -= 1
        else:
            self.current_month -= 1
        self.update_calendar()

    def next_month(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É"""
        if self.current_month == 12:
            self.current_month = 1
            self.current_year += 1
        else:
            self.current_month += 1
        self.update_calendar()

    def load_all_sections(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        self.load_today_tasks()
        self.load_upcoming_deadlines()
        self.load_next_exam()


    def load_today_tasks(self):
        """–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞ –ò –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç (–ë–ï–ó —ç–∫–∑–∞–º–µ–Ω–æ–≤)"""
        self.today_tasks = []
        today = datetime.now().date()

        try:
            with get_connection() as conn:
                with conn.cursor() as cur:
                    # –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ò–õ–ò –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç –ò–õ–ò –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –±—É–¥—É—â–µ–º
                    cur.execute("""
                        SELECT t.*, s.name as subject_name 
                        FROM tasks t 
                        LEFT JOIN subjects s ON t.subject_id = s.id 
                        WHERE (
                            (t.due_date::date = %s)  -- –ó–∞–¥–∞—á–∏ —Å –¥–∞—Ç–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                            OR 
                            (t.due_date IS NULL AND t.status = 'active')  -- –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã
                            OR
                            (t.due_date::date > %s AND t.status = 'active')  -- –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –±—É–¥—É—â–µ–º
                        )
                        AND t.status = 'active'
                        AND (t.type IS NULL OR t.type != 'exam')
                        ORDER BY 
                            CASE 
                                WHEN t.due_date IS NULL THEN 2
                                WHEN t.due_date::date = %s THEN 1  -- –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
                                ELSE 3 
                            END,
                            t.due_date ASC,
                            t.created_at DESC;
                    """, (today, today, today))
                    tasks = cur.fetchall()
                    self.today_tasks = [dict(task) for task in tasks]

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(self.today_tasks)}")
                    for task in self.today_tasks:
                        print(f"–ó–∞–¥–∞—á–∞: {task['title']}, –¥–∞—Ç–∞: {task.get('due_date')}, —Å—Ç–∞—Ç—É—Å: {task.get('status')}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            self.today_tasks = []

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if hasattr(self, 'ids') and 'today_container' in self.ids:
            container = self.ids.today_container
            container.clear_widgets()

            if not self.today_tasks:
                container.add_widget(MDLabel(
                    text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç",
                    theme_text_color="Secondary",
                    size_hint_y=None,
                    height=40
                ))
            else:
                for task in self.today_tasks:
                    subject_name = task.get('subject_name', '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞')
                    if subject_name is None:
                        subject_name = ''

                    deadline_text = ""
                    days_text = ""

                    if task.get('due_date'):
                        try:
                            # –ï—Å–ª–∏ due_date - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
                            if isinstance(task['due_date'], datetime):
                                deadline_date = task['due_date'].date()
                                deadline_text = task['due_date'].strftime("(%d.%m.%Y)")
                            # –ï—Å–ª–∏ due_date - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                            elif isinstance(task['due_date'], str):
                                deadline_date = datetime.strptime(task['due_date'], "%Y-%m-%d %H:%M:%S").date()
                                deadline_text = deadline_date.strftime("(%d.%m.%Y)")
                            # –ï—Å–ª–∏ due_date - —ç—Ç–æ date –æ–±—ä–µ–∫—Ç
                            else:
                                deadline_date = task['due_date']
                                deadline_text = task['due_date'].strftime("(%d.%m.%Y)")

                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
                            today = datetime.now().date()
                            days_left = (deadline_date - today).days

                            if days_left == 0:
                                days_text = " - —Å–µ–≥–æ–¥–Ω—è"
                            elif days_left == 1:
                                days_text = " - –∑–∞–≤—Ç—Ä–∞"
                            elif days_left > 1:
                                days_text = f" - —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                            else:
                                days_text = " - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"

                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                            deadline_text = "(–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"
                    else:
                        deadline_text = "(–±–µ–∑ –¥–∞—Ç—ã)"
                        days_text = ""

                    item = OneLineAvatarListItem(
                        text=f"{task['title']} - {subject_name} {deadline_text}{days_text}",
                        on_release=lambda x, t=task: self.view_task_details(t)
                    )

                    icon_name = self.get_icon_for_task_type(task.get('type', 'other'))
                    icon = IconLeftWidget(icon=icon_name)
                    item.add_widget(icon)
                    container.add_widget(item)

    def load_upcoming_deadlines(self):
        """–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã (7 –¥–Ω–µ–π) –ò –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        self.upcoming_deadlines = []
        today = datetime.now().date()
        seven_days_later = today + timedelta(days=7)

        try:
            with get_connection() as conn:
                with conn.cursor() as cur:
                    # –î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –ò–õ–ò –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç
                    cur.execute("""
                        SELECT t.*, s.name as subject_name 
                        FROM tasks t 
                        LEFT JOIN subjects s ON t.subject_id = s.id 
                        WHERE (
                            (t.due_date::date BETWEEN %s AND %s)  -- –ó–∞–¥–∞—á–∏ —Å –¥–∞—Ç–æ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                            OR 
                            (t.due_date IS NULL AND t.created_at >= NOW() - INTERVAL '3 days')  -- –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç
                        )
                        AND t.status = 'active'
                        AND (t.type IS NULL OR t.type != 'exam')
                        ORDER BY 
                            CASE WHEN t.due_date IS NULL THEN 1 ELSE 0 END,
                            t.due_date ASC 
                        LIMIT 10;  -- –£–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç
                    """, (today, seven_days_later))
                    tasks = cur.fetchall()
                    self.upcoming_deadlines = [dict(task) for task in tasks]

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤: {len(self.upcoming_deadlines)}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
            self.upcoming_deadlines = []

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if hasattr(self, 'ids') and 'deadlines_container' in self.ids:
            container = self.ids.deadlines_container
            container.clear_widgets()

            if not self.upcoming_deadlines:
                container.add_widget(MDLabel(
                    text="–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ—Ç",
                    theme_text_color="Secondary",
                    size_hint_y=None,
                    height=40
                ))
            else:
                for task in self.upcoming_deadlines:
                    days_left = 0
                    deadline_date = None

                    if task.get('due_date'):
                        try:
                            if isinstance(task['due_date'], datetime):
                                deadline_date = task['due_date'].date()
                            elif isinstance(task['due_date'], str):
                                deadline_date = datetime.strptime(task['due_date'], "%Y-%m-%d %H:%M:%S").date()
                            else:
                                deadline_date = task['due_date']

                            days_left = (deadline_date - today).days
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π: {e}")
                            days_left = 0

                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ subject_name = None, —Ç–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
                    subject_name = task.get('subject_name')
                    if subject_name is None:
                        subject_display = ""
                    else:
                        subject_display = f" - {subject_name}"

                    if task.get('due_date') is None:
                        days_text = "–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
                    elif days_left == 0:
                        days_text = "—Å–µ–≥–æ–¥–Ω—è"
                    elif days_left == 1:
                        days_text = "–∑–∞–≤—Ç—Ä–∞"
                    else:
                        days_text = f"—á–µ—Ä–µ–∑ {days_left} –¥–Ω."

                    formatted_date = ""
                    if deadline_date:
                        formatted_date = deadline_date.strftime("(%d.%m.%Y) ")
                    elif task.get('due_date') is None:
                        formatted_date = ""

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                    display_text = f"{task['title']}{subject_display} {formatted_date}{days_text}"

                    item = OneLineListItem(
                        text=display_text.strip(),  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        on_release=lambda x, t=task: self.view_task_details(t)
                    )
                    container.add_widget(item)

    def load_next_exam(self):
        """–°–ª–µ–¥—É—é—â–∏–π —ç–∫–∑–∞–º–µ–Ω"""
        self.next_exam = []
        today = datetime.now().date()

        try:
            with get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT t.*, s.name as subject_name 
                        FROM tasks t 
                        LEFT JOIN subjects s ON t.subject_id = s.id 
                        WHERE t.type = 'exam' 
                        AND t.due_date::date >= %s 
                        AND t.status != 'completed'
                        ORDER BY t.due_date ASC 
                        LIMIT 1;
                    """, (today,))
                    exam = cur.fetchone()

                    if exam:
                        self.next_exam = [dict(exam)]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤: {e}")
            self.next_exam = []

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if hasattr(self, 'ids') and 'exam_container' in self.ids:
            container = self.ids.exam_container
            container.clear_widgets()

            if not self.next_exam:
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ - —Å–µ–∫—Ü–∏—è —Å–∞–º–∞ —Å–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ KV
                return
            else:
                exam_data = self.next_exam[0]
                days_left = 0
                if exam_data.get('due_date'):
                    try:
                        days_left = (exam_data['due_date'].date() - today).days
                    except:
                        days_left = 0

                subject_name = exam_data.get('subject_name')
                if not subject_name:  # –ï—Å–ª–∏ subject_name = None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                    subject_name = ""  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

                exam_card = MDCard(
                    orientation="vertical",
                    padding=15,
                    size_hint_y=None,
                    height=120,
                    md_bg_color=(0.8, 0.2, 0.2, 1) if days_left <= 3 else (0.2, 0.6, 0.8, 1),
                    ripple_behavior=True,
                    on_release=lambda x: self.view_task_details(exam_data)
                )

                content = MDBoxLayout(orientation="vertical", spacing=5)
                content.add_widget(MDLabel(
                    text=f"–≠–∫–∑–∞–º–µ–Ω: {subject_name}",
                    theme_text_color="Custom",
                    text_color=(1, 1, 1, 1),
                    font_style="H6",
                    size_hint_y=None,
                    height=30
                ))
                content.add_widget(MDLabel(
                    text=f"{exam_data['title']}",
                    theme_text_color="Custom",
                    text_color=(1, 1, 1, 0.9),
                    size_hint_y=None,
                    height=25
                ))

                exam_date = ""
                if exam_data.get('due_date'):
                    try:
                        exam_date = exam_data['due_date'].strftime("%d.%m.%Y")
                    except:
                        exam_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                if days_left == 0:
                    time_text = "–°–µ–≥–æ–¥–Ω—è!"
                elif days_left == 1:
                    time_text = "–ó–∞–≤—Ç—Ä–∞!"
                else:
                    time_text = f"–ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"

                content.add_widget(MDLabel(
                    text=f"{exam_date} ‚Ä¢ {time_text}",
                    theme_text_color="Custom",
                    text_color=(1, 1, 1, 0.8),
                    font_style="Subtitle1",
                    size_hint_y=None,
                    height=25
                ))

                exam_card.add_widget(content)
                container.add_widget(exam_card)

    def get_icon_for_task_type(self, task_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        icons = {
            'exam': 'school',
            'homework': 'book',
            'lecture': 'presentation',
            'practice': 'code-tags',
            'other': 'format-list-checks'
        }
        return icons.get(task_type, 'format-list-checks')

    def view_task_details(self, task):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏"""
        print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏: {task['title']}")

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.load_all_sections()
        self.update_calendar()

    def debug_check_all_tasks(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ"""
        try:
            with get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT id, title, type, due_date, status, created_at 
                        FROM tasks 
                        ORDER BY created_at DESC
                    """)
                    all_tasks = cur.fetchall()

                    print("=== –í–°–ï –ó–ê–î–ê–ß–ò –í –ë–ê–ó–ï ===")
                    for task in all_tasks:
                        print(f"ID: {task['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}, –¢–∏–ø: {task.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}, "
                              f"–î–∞—Ç–∞: {task.get('due_date')}, –°—Ç–∞—Ç—É—Å: {task.get('status')}, "
                              f"–°–æ–∑–¥–∞–Ω–∞: {task.get('created_at')}")
                    print("=========================")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: {e}")


    def on_pre_enter(self):
        self.init_calendar()
        self.load_all_sections()
        self.debug_check_all_tasks()