from kivy.uix.screenmanager import Screen
from kivy.properties import ListProperty, StringProperty
from kivymd.uix.label import MDLabel
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton, MDFlatButton, MDIconButton
from kivymd.uix.card import MDCard
from kivymd.uix.list import OneLineListItem
from kivymd.uix.dialog import MDDialog
from kivymd.uix.textfield import MDTextField
from kivymd.uix.menu import MDDropdownMenu
from datetime import datetime
from database import get_subjects, get_schedule_with_subjects, add_schedule_entry, \
    update_schedule_entry, delete_schedule_entry
from kivy.metrics import dp
from kivy.uix.modalview import ModalView


class CustomTimePicker(ModalView):
    def __init__(self, callback, **kwargs):
        super().__init__(**kwargs)
        self.callback = callback
        self.size_hint = (0.8, 0.6)
        self.auto_dismiss = False
        self.background_color = (0, 0, 0, 0.3)
        self.background = ""

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = MDCard(
            orientation='vertical',
            padding=dp(20),
            spacing=dp(15),
            size_hint=(0.9, 0.9),
            pos_hint={'center_x': 0.5, 'center_y': 0.5},
            elevation=10,
            radius=dp(15),
            md_bg_color=(1, 1, 1, 1)
        )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = MDLabel(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è',
            halign='center',
            font_style='H5',
            theme_text_color='Custom',
            text_color=(0.4, 0.2, 0.6, 1),
            size_hint_y=None,
            height=dp(40),
            bold=True
        )
        main_layout.add_widget(title_label)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ - –£–ë–†–ê–¢–¨ halign
        time_container = MDBoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=dp(80),
            spacing=dp(10)
        )

        # –ü–æ–ª–µ —á–∞—Å–æ–≤
        hours_card = MDCard(
            orientation='vertical',
            size_hint=(0.3, 0.8),
            elevation=2,
            radius=dp(10),
            md_bg_color=(0.95, 0.93, 0.98, 1)
        )

        self.hours_label = MDLabel(
            text='09',
            halign='center',
            font_style='H4',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            bold=True
        )
        hours_card.add_widget(self.hours_label)

        hours_buttons = MDBoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=dp(30),
            spacing=dp(2)
        )

        hours_up = MDIconButton(
            icon='chevron-up',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            on_press=self.increment_hours
        )
        hours_down = MDIconButton(
            icon='chevron-down',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            on_press=self.decrement_hours
        )

        hours_buttons.add_widget(hours_up)
        hours_buttons.add_widget(hours_down)
        hours_card.add_widget(hours_buttons)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        colon_label = MDLabel(
            text=':',
            halign='center',
            font_style='H4',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            size_hint_x=None,
            width=dp(20),
            bold=True
        )

        # –ü–æ–ª–µ –º–∏–Ω—É—Ç
        minutes_card = MDCard(
            orientation='vertical',
            size_hint=(0.3, 0.8),
            elevation=2,
            radius=dp(10),
            md_bg_color=(0.95, 0.93, 0.98, 1)
        )

        self.minutes_label = MDLabel(
            text='00',
            halign='center',
            font_style='H4',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            bold=True
        )
        minutes_card.add_widget(self.minutes_label)

        minutes_buttons = MDBoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=dp(30),
            spacing=dp(2)
        )

        minutes_up = MDIconButton(
            icon='chevron-up',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            on_press=self.increment_minutes
        )
        minutes_down = MDIconButton(
            icon='chevron-down',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            on_press=self.decrement_minutes
        )

        minutes_buttons.add_widget(minutes_up)
        minutes_buttons.add_widget(minutes_down)
        minutes_card.add_widget(minutes_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        time_container.add_widget(hours_card)
        time_container.add_widget(colon_label)
        time_container.add_widget(minutes_card)

        main_layout.add_widget(time_container)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = MDBoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=dp(50),
            spacing=dp(15)
        )

        cancel_btn = MDFlatButton(
            text='–û—Ç–º–µ–Ω–∞',
            theme_text_color='Custom',
            text_color=(0.5, 0.3, 0.7, 1),
            on_press=self.dismiss
        )

        ok_btn = MDRaisedButton(
            text='OK',
            md_bg_color=(0.5, 0.3, 0.7, 1),
            theme_text_color='Custom',
            text_color=(1, 1, 1, 1),
            on_press=self.set_time
        )

        buttons_layout.add_widget(cancel_btn)
        buttons_layout.add_widget(ok_btn)
        main_layout.add_widget(buttons_layout)

        self.add_widget(main_layout)

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        self.current_hours = 9
        self.current_minutes = 0

    def increment_hours(self, instance):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—ã"""
        self.current_hours = (self.current_hours + 1) % 24
        self.hours_label.text = str(self.current_hours).zfill(2)

    def decrement_hours(self, instance):
        """–£–º–µ–Ω—å—à–∞–µ—Ç —á–∞—Å—ã"""
        self.current_hours = (self.current_hours - 1) % 24
        self.hours_label.text = str(self.current_hours).zfill(2)

    def increment_minutes(self, instance):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∏–Ω—É—Ç—ã"""
        self.current_minutes = (self.current_minutes + 5) % 60
        self.minutes_label.text = str(self.current_minutes).zfill(2)

    def decrement_minutes(self, instance):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –º–∏–Ω—É—Ç—ã"""
        self.current_minutes = (self.current_minutes - 5) % 60
        self.minutes_label.text = str(self.current_minutes).zfill(2)

    def set_time(self, instance):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            from datetime import time
            selected_time = time(
                hour=self.current_hours,
                minute=self.current_minutes
            )
            self.callback(selected_time)
            self.dismiss()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")


class SubjectMenuItem(OneLineListItem):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""

    def __init__(self, subject, callback, **kwargs):
        super().__init__(**kwargs)
        self.subject = subject
        self.callback = callback

    def on_release(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é"""
        self.callback(self.subject)


class ScheduleScreen(Screen):
    schedule_entries = ListProperty([])
    subjects = ListProperty([])
    current_day = StringProperty("")

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.current_view = "week"
        self.selected_day = None
        self.subjects_menu = None
        self.selected_subject = None
        self.dialog = None

    def on_pre_enter(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        self.load_subjects()
        self.load_schedule()
        self.setup_subjects_menu()
        self.update_display()

    def load_subjects(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.subjects = get_subjects()
            print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(self.subjects)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            self.subjects = []

    def setup_subjects_menu(self):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        if not self.subjects:
            print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é")
            return

        menu_items = []
        for subject in self.subjects:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
            teacher_name = self.get_teacher_name(subject.get('teacher_id'))
            classroom = subject.get('classroom', '')

            item_text = f"{subject['name']}"
            if teacher_name or classroom:
                item_text += f" ({teacher_name}"
                if classroom:
                    item_text += f", –∞—É–¥. {classroom}"
                item_text += ")"

            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é
            menu_item = {
                "viewclass": "OneLineListItem",
                "text": item_text,
                "on_release": self.create_subject_handler(subject)
            }
            menu_items.append(menu_item)

        self.subjects_menu = MDDropdownMenu(
            items=menu_items,
            width_mult=4,
        )
        print(f"‚úÖ –ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ —Å {len(menu_items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")

    def create_subject_handler(self, subject):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""

        def handler():
            self.select_subject(subject)

        return handler

    def get_teacher_name(self, teacher_id):
        """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        if not teacher_id:
            return ""
        try:
            from database import get_teacher_name
            return get_teacher_name(teacher_id)
        except:
            return ""

    def select_subject(self, subject):
        """–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –º–µ–Ω—é"""
        print(f"üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject['name']}")
        self.selected_subject = subject
        if hasattr(self, 'subject_field'):
            teacher_name = self.get_teacher_name(subject.get('teacher_id'))
            classroom = subject.get('classroom', '')

            display_text = f"{subject['name']}"
            if teacher_name:
                display_text += f" - {teacher_name}"
            if classroom:
                display_text += f" (–∞—É–¥. {classroom})"

            self.subject_field.text = display_text

        if self.subjects_menu:
            self.subjects_menu.dismiss()

    def load_schedule(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã"""
        try:
            self.schedule_entries = get_schedule_with_subjects()
            print(f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {len(self.schedule_entries)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            self.schedule_entries = []

    def switch_view(self, view_type):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–æ–º –Ω–µ–¥–µ–ª–∏ –∏ –¥–Ω—è"""
        self.current_view = view_type
        self.update_display()

    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        container = self.ids.schedule_container
        container.clear_widgets()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥ –Ω–µ–¥–µ–ª–∏
        self.show_week_view()

    def show_week_view(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥ –Ω–µ–¥–µ–ª–∏"""
        container = self.ids.schedule_container

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏
        title_label = MDLabel(
            text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            halign="center",
            font_style="H5",
            theme_text_color="Custom",
            text_color=(0.4, 0.2, 0.6, 1),
            size_hint_y=None,
            height=dp(50),
            bold=True
        )
        container.add_widget(title_label)

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        days_of_week = [
            ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 0),
            ("–í—Ç–æ—Ä–Ω–∏–∫", 1),
            ("–°—Ä–µ–¥–∞", 2),
            ("–ß–µ—Ç–≤–µ—Ä–≥", 3),
            ("–ü—è—Ç–Ω–∏—Ü–∞", 4),
            ("–°—É–±–±–æ—Ç–∞", 5),
            ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", 6)
        ]

        for day_name, day_index in days_of_week:
            day_entries = [entry for entry in self.schedule_entries
                           if entry.get('day_of_week') == day_index]

            card = MDCard(
                orientation="vertical",
                size_hint_y=None,
                height=dp(120) if day_entries else dp(100),
                padding=dp(20),
                spacing=dp(10),
                elevation=2
            )

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            header = MDBoxLayout(
                orientation="horizontal",
                size_hint_y=None,
                height=dp(30)
            )

            day_label = MDLabel(
                text=day_name,
                theme_text_color="Custom",
                text_color=(0.4, 0.2, 0.6, 1),
                font_style="H6",
                bold=True,
                size_hint_x=0.8
            )

            add_btn = MDIconButton(
                icon="plus",
                size_hint_x=0.2,
                theme_text_color="Custom",
                text_color=(0.5, 0.3, 0.7, 1),
                on_release=lambda x, day=day_index: self.add_schedule_entry(day)
            )

            header.add_widget(day_label)
            header.add_widget(add_btn)
            card.add_widget(header)

            if day_entries:
                for entry in day_entries:
                    start_time = entry.get('start_time', '').strftime('%H:%M') if entry.get('start_time') else ''
                    end_time = entry.get('end_time', '').strftime('%H:%M') if entry.get('end_time') else ''

                    pair_text = f"{start_time}-{end_time} - {entry.get('subject_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
                    if entry.get('classroom'):
                        pair_text += f" ({entry.get('classroom')})"

                    pair_layout = MDBoxLayout(
                        orientation="horizontal",
                        size_hint_y=None,
                        height=dp(25)
                    )

                    pair_label = MDLabel(
                        text=f"‚Ä¢ {pair_text}",
                        theme_text_color="Custom",
                        text_color=(0.3, 0.3, 0.4, 1),
                        size_hint_x=0.8
                    )

                    edit_btn = MDIconButton(
                        icon="pencil",
                        size_hint_x=0.1,
                        theme_text_color="Custom",
                        text_color=(0.5, 0.3, 0.7, 0.7),
                        on_release=lambda x, e=entry: self.edit_schedule_entry(e)
                    )

                    delete_btn = MDIconButton(
                        icon="delete",
                        size_hint_x=0.1,
                        theme_text_color="Custom",
                        text_color=(0.8, 0.2, 0.2, 0.7),
                        on_release=lambda x, e=entry: self.delete_schedule_entry(e)
                    )

                    pair_layout.add_widget(pair_label)
                    pair_layout.add_widget(edit_btn)
                    pair_layout.add_widget(delete_btn)
                    card.add_widget(pair_layout)
            else:
                empty_label = MDLabel(
                    text="–ù–µ—Ç –ø–∞—Ä",
                    theme_text_color="Custom",
                    text_color=(0.6, 0.6, 0.7, 1),
                    halign="center",
                    size_hint_y=None,
                    height=dp(30)
                )
                card.add_widget(empty_label)

            container.add_widget(card)

    def add_schedule_entry(self, day_of_week):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –¥–ª—è –¥–Ω—è: {day_of_week}")
        self.selected_subject = None
        self.show_schedule_dialog(day_of_week)

    def edit_schedule_entry(self, entry):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã"""
        print(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã: {entry.get('subject_name', '')}")
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID
        subject_id = entry.get('subject_id')
        for subject in self.subjects:
            if subject['id'] == subject_id:
                self.selected_subject = subject
                break

        self.show_schedule_dialog(
            entry.get('day_of_week'),
            entry,
            is_edit=True
        )

    def show_schedule_dialog(self, day_of_week, entry=None, is_edit=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã"""
        print(f"üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–Ω—è {day_of_week}, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {is_edit}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–∞
        content = MDBoxLayout(
            orientation="vertical",
            spacing=dp(15),
            size_hint_y=None,
            height=dp(350)
        )

        # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ - –¥–µ–ª–∞–µ–º readonly –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
        subject_layout = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=None,
            height=dp(60)
        )

        subject_layout.add_widget(MDLabel(
            text="–ü—Ä–µ–¥–º–µ—Ç:",
            size_hint_x=0.3,
            halign="left"
        ))

        # –ü–æ–ª–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        self.subject_field = MDTextField(
            hint_text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞",
            size_hint_x=0.5,
            readonly=True  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ - –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        )

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        select_btn = MDRaisedButton(
            text="–í—ã–±—Ä–∞—Ç—å",
            size_hint_x=0.2,
            md_bg_color=(0.5, 0.3, 0.7, 1),
            on_release=lambda x: self.show_subjects_menu_direct()
        )

        subject_layout.add_widget(self.subject_field)
        subject_layout.add_widget(select_btn)
        content.add_widget(subject_layout)

        # –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
        time_layout = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=None,
            height=dp(60)
        )

        self.start_time_field = MDTextField(
            hint_text="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞",
            size_hint_x=0.5,
            readonly=True
        )
        self.start_time_field.bind(focus=self.show_time_picker_start)

        self.end_time_field = MDTextField(
            hint_text="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è",
            size_hint_x=0.5,
            readonly=True
        )
        self.end_time_field.bind(focus=self.show_time_picker_end)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        if is_edit and entry:
            if entry.get('start_time'):
                self.start_time_field.text = entry['start_time'].strftime('%H:%M')
            if entry.get('end_time'):
                self.end_time_field.text = entry['end_time'].strftime('%H:%M')

        time_layout.add_widget(self.start_time_field)
        time_layout.add_widget(self.end_time_field)
        content.add_widget(time_layout)

        # –ö–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        buttons = [
            MDFlatButton(
                text="–û—Ç–º–µ–Ω–∞",
                theme_text_color="Custom",
                text_color=(0.5, 0.3, 0.7, 1),
                on_release=lambda x: self.dialog.dismiss()
            ),
            MDRaisedButton(
                text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" if is_edit else "–î–æ–±–∞–≤–∏—Ç—å",
                md_bg_color=(0.5, 0.3, 0.7, 1),
                theme_text_color="Custom",
                text_color=(1, 1, 1, 1),
                on_release=lambda x: self.save_schedule_entry(day_of_week, entry if is_edit else None)
            )
        ]

        title = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—É" if is_edit else "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É"

        self.dialog = MDDialog(
            title=title,
            type="custom",
            content_cls=content,
            buttons=buttons,
            size_hint=(0.8, None)
        )
        self.dialog.open()

    def show_subjects_menu_direct(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"""
        print("üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        if self.subjects_menu:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –º–µ–Ω—é
            temp_widget = MDLabel()
            self.subjects_menu.caller = temp_widget
            self.subjects_menu.open()
        else:
            print("‚ö†Ô∏è –ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            self.show_error("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–µ–¥–º–µ—Ç—ã'")

    def show_time_picker_start(self, instance, value):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
        if value:
            print("‚è∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞")
            time_picker = CustomTimePicker(callback=self.set_start_time)
            time_picker.open()

    def show_time_picker_end(self, instance, value):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        if value:
            print("‚è∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            time_picker = CustomTimePicker(callback=self.set_end_time)
            time_picker.open()

    def set_start_time(self, time_obj):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"""
        self.start_time_field.text = time_obj.strftime('%H:%M')

    def set_end_time(self, time_obj):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        self.end_time_field.text = time_obj.strftime('%H:%M')

    def validate_time_format(self, time_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            datetime.strptime(time_str, '%H:%M')
            return True
        except ValueError:
            return False

    def save_schedule_entry(self, day_of_week, entry=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if not self.selected_subject:
            self.show_error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç")
            return

        if not self.start_time_field.text or not self.end_time_field.text:
            self.show_error("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        if not self.validate_time_format(self.start_time_field.text):
            self.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return

        if not self.validate_time_format(self.end_time_field.text):
            self.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return

        try:
            if entry:  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                update_schedule_entry(
                    entry_id=entry['id'],
                    subject_id=self.selected_subject['id'],
                    start_time=self.start_time_field.text,
                    end_time=self.end_time_field.text
                )
            else:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                add_schedule_entry(
                    subject_id=self.selected_subject['id'],
                    day_of_week=day_of_week,
                    start_time=self.start_time_field.text,
                    end_time=self.end_time_field.text
                )

            self.dialog.dismiss()
            self.load_schedule()
            self.update_display()
            self.show_success("–ü–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã: {e}")
            self.show_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def delete_schedule_entry(self, entry):
        """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        self.dialog = MDDialog(
            title="–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã",
            text=f"–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É '{entry.get('subject_name', '')}'?",
            buttons=[
                MDFlatButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    theme_text_color="Custom",
                    text_color=(0.5, 0.3, 0.7, 1),
                    on_release=lambda x: self.dialog.dismiss()
                ),
                MDRaisedButton(
                    text="–£–¥–∞–ª–∏—Ç—å",
                    md_bg_color=(0.8, 0.2, 0.2, 1),
                    theme_text_color="Custom",
                    text_color=(1, 1, 1, 1),
                    on_release=lambda x: self.confirm_delete_schedule_entry(entry)
                )
            ]
        )
        self.dialog.open()

    def confirm_delete_schedule_entry(self, entry):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã"""
        try:
            delete_schedule_entry(entry['id'])
            self.dialog.dismiss()
            self.load_schedule()
            self.update_display()
            self.show_success("–ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—ã: {e}")
            self.show_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.dialog = MDDialog(
            title="–û—à–∏–±–∫–∞",
            text=message,
            buttons=[
                MDRaisedButton(
                    text="OK",
                    md_bg_color=(0.5, 0.3, 0.7, 1),
                    on_release=lambda x: self.dialog.dismiss()
                )
            ]
        )
        self.dialog.open()

    def show_success(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        self.dialog = MDDialog(
            title="–£—Å–ø–µ—à–Ω–æ",
            text=message,
            buttons=[
                MDRaisedButton(
                    text="OK",
                    md_bg_color=(0.5, 0.3, 0.7, 1),
                    on_release=lambda x: self.dialog.dismiss()
                )
            ]
        )
        self.dialog.open()